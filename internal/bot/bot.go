package bot

import (
	"log"
	telegramBot "ticker-pulse-bot/internal/telegram_bot"
	workerPool "ticker-pulse-bot/internal/worker_pool"
)

type Bot struct {
	tgBot      *telegramBot.TelegramBot
	workerPool *workerPool.WorkerPool
}

func NewBot(maxWorkers int) (*Bot, error) {
	tgBot, err := telegramBot.NewTelegramBot()
	if err != nil {
		log.Fatal("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ", err)
		return nil, err
	}

	wp := workerPool.NewWorkerPool(maxWorkers)

	return &Bot{
		tgBot:      tgBot,
		workerPool: wp,
	}, nil
}

// –ó–∞–ø—É—Å–∫ –≤–º–µ—Å—Ç–µ —Å WorkerPool
func (b *Bot) Start() {
	b.workerPool.Start()

	b.SendMessageAsync("–ü—Ä–∏–≤–µ—Ç üåç –Ø —Ç—É—Ç, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ, –µ—Å–ª–∏ —á—Ç–æ - –¥–∞–º –∑–Ω–∞—Ç—å. üöÄ")
	b.CreateKeyboardAsync()
	b.ListenKeyboardEventsAsync()

	log.Println("[TICKER-PULSE-BOT]: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WorkerPool
func (b *Bot) Stop() {
	b.workerPool.Stop()
	log.Println("[TICKER-PULSE-BOT]: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ WorkerPool
func (b *Bot) SendMessageAsync(text string) {
	b.workerPool.AddTask(func() {
		if err := b.tgBot.SendMessage(text); err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		} else {
			log.Println("[TICKER-PULSE-BOT]: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		}
	})
}

func (b *Bot) CreateKeyboardAsync() {
	b.workerPool.AddTask(func() {
		if err := b.tgBot.CreateKeyboard(); err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ GUI: %v", err)
		} else {
			log.Println("[TICKER-PULSE-BOT]: GUI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
		}
	})
}

func (b *Bot) ListenKeyboardEventsAsync() {
	b.workerPool.AddTask(func() {
		b.tgBot.ListenKeyboardEvents()
	})
}
