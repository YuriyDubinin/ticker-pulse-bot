package bot

import (
	"log"
	"math/rand"
	cryptoFetcher "ticker-pulse-bot/internal/crypto_fetcher"
	dataFormatter "ticker-pulse-bot/internal/pkg/data_formatter"
	telegramMsgFmt "ticker-pulse-bot/internal/pkg/telegram_message_formatter"
	telegramBot "ticker-pulse-bot/internal/telegram_bot"
	workerPool "ticker-pulse-bot/internal/worker_pool"
	"time"
)

type QuoteInfo struct {
	CryptoID  string
	Ticker    string
	Label     string
	MinPrice  float64
	MaxPrice  float64
	UpdatedAt time.Time
}

type Bot struct {
	tgBot      *telegramBot.TelegramBot
	workerPool *workerPool.WorkerPool
	quotes     *[]QuoteInfo
}

func NewBot(maxWorkers int) (*Bot, error) {
	tgBot, err := telegramBot.NewTelegramBot()
	if err != nil {
		log.Fatal("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ", err)
		return nil, err
	}

	wp := workerPool.NewWorkerPool(maxWorkers)

	return &Bot{
		tgBot:      tgBot,
		workerPool: wp,
	}, nil
}

// –ó–∞–ø—É—Å–∫ –≤–º–µ—Å—Ç–µ —Å WorkerPool
func (b *Bot) Start() {
	b.workerPool.Start()

	b.SendMessageAsync("–ü—Ä–∏–≤–µ—Ç üåç –Ø —Ç—É—Ç, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ, –µ—Å–ª–∏ —á—Ç–æ - –¥–∞–º –∑–Ω–∞—Ç—å. üöÄ")
	b.CreateKeyboardAsync()
	b.ListenKeyboardEventsAsync(map[string]func(){
		"CURRENT_QUOTES_RATE": func() {
			err := b.tgBot.SendMessage("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏..")
			if err != nil {
				log.Println("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
			}
			b.ReportCurrentQuotesRateAsync("bitcoin,ethereum,tether,binancecoin,usd-coin,ripple,cardano,dogecoin,solana,the-open-network")
		},
	})
	b.CalculateQuotesInfo()

	log.Println("[TICKER-PULSE-BOT]: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WorkerPool
func (b *Bot) Stop() {
	b.workerPool.Stop()
	log.Println("[TICKER-PULSE-BOT]: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ WorkerPool
func (b *Bot) SendMessageAsync(text string) {
	b.workerPool.AddTask(func() {
		if err := b.tgBot.SendMessage(text); err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		} else {
			log.Println("[TICKER-PULSE-BOT]: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		}
	})
}

func (b *Bot) CreateKeyboardAsync() {
	b.workerPool.AddTask(func() {
		if err := b.tgBot.CreateKeyboard(); err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ GUI: %v", err)
		} else {
			log.Println("[TICKER-PULSE-BOT]: GUI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
		}
	})
}

func (b *Bot) ListenKeyboardEventsAsync(handlers map[string]func()) {
	b.workerPool.AddTask(func() {
		b.tgBot.ListenKeyboardEvents(handlers)
	})
}

// Report current quotes rate to chat
func (b *Bot) ReportCurrentQuotesRateAsync(cryptoID string) {
	b.workerPool.AddTask(func() {
		cf := cryptoFetcher.NewCryptoFetcher()
		data, err := cf.FetchCoingeckoQuotesRate(cryptoID, "usd")
		if err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: %v", err)
			return
		}
		b.tgBot.SendMessage(telegramMsgFmt.ConvertCryptoDataToString(data))
	})
}

func (b *Bot) CalculateQuotesInfo() {
	quotes := []QuoteInfo{
		{CryptoID: "bitcoin", Ticker: "BTC", Label: "Bitcoin"},
		{CryptoID: "ethereum", Ticker: "ETH", Label: "Ethereum"},
		{CryptoID: "tether", Ticker: "USDT", Label: "Tether"},
		{CryptoID: "binancecoin", Ticker: "BNB", Label: "Binance Coin"},
		{CryptoID: "usd-coin", Ticker: "USDC", Label: "USD Coin"},
		{CryptoID: "ripple", Ticker: "XRP", Label: "Ripple"},
		{CryptoID: "cardano", Ticker: "ADA", Label: "Cardano"},
		{CryptoID: "dogecoin", Ticker: "DOGE", Label: "Dogecoin"},
		{CryptoID: "solana", Ticker: "SOL", Label: "Solana"},
		{CryptoID: "the-open-network", Ticker: "TON", Label: "The Open Network"},
	}

	rand.Seed(time.Now().UnixNano()) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º seed –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

	b.workerPool.AddTask(func() {
		var updatedQuotes []QuoteInfo

		for _, quote := range quotes {
			cf := cryptoFetcher.NewCryptoFetcher()
			historicalData, err := cf.FetchCoingeckoHistoricalData(quote.CryptoID, 14)
			if err != nil {
				log.Printf("[TICKER-PULSE-BOT]:  %v", err)
				return
			}

			minMaxPrices, err := dataFormatter.CalculateHistoricalMinMax(historicalData, "prices")
			if err != nil {
				log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:  %v", err)
				return
			}
			log.Printf("%v min / max:  %v", quote.Ticker, minMaxPrices)

			quote.MinPrice = minMaxPrices.MinPrice
			quote.MaxPrice = minMaxPrices.MaxPrice
			quote.UpdatedAt = time.Now()

			updatedQuotes = append(updatedQuotes, quote)

			time.Sleep(time.Duration(15) * time.Second)
		}

		b.quotes = &updatedQuotes
		log.Println("[TICKER-PULSE-BOT]: –°–ø–∏—Å–æ–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	})
}
