package bot

import (
	"fmt"
	"log"
	cryptoFetcher "ticker-pulse-bot/internal/crypto_fetcher"
	dataFormatter "ticker-pulse-bot/internal/pkg/data_formatter"
	quotes "ticker-pulse-bot/internal/pkg/quotes"
	telegramBot "ticker-pulse-bot/internal/telegram_bot"
	workerPool "ticker-pulse-bot/internal/worker_pool"
	"time"
)

type Bot struct {
	tgBot      *telegramBot.TelegramBot
	workerPool *workerPool.WorkerPool
	quotes     []quotes.QuoteInfo // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –ø–æ–¥—å—ä–µ–º–∞ –±–∞–∑—ã
}

func NewBot(maxWorkers int) (*Bot, error) {
	tgBot, err := telegramBot.NewTelegramBot()
	if err != nil {
		log.Fatal("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ", err)
		return nil, err
	}

	wp := workerPool.NewWorkerPool(maxWorkers)

	return &Bot{
		tgBot:      tgBot,
		workerPool: wp,
		quotes:     quotes.Quotes,
	}, nil
}

// –ó–∞–ø—É—Å–∫ –≤–º–µ—Å—Ç–µ —Å WorkerPool
// todo: –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å currency
func (b *Bot) Start() {
	log.Println("[TICKER-PULSE-BOT]: –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
	b.workerPool.Start()
	b.SendMessageAsync("–ü—Ä–∏–≤–µ—Ç üåç –Ø —Ç—É—Ç, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ, –µ—Å–ª–∏ —á—Ç–æ - –¥–∞–º –∑–Ω–∞—Ç—å. üöÄ")
	b.CreateKeyboardAsync()
	b.ListenKeyboardEventsAsync(map[string]func(){
		"CURRENT_QUOTES_RATE": func() {
			err := b.tgBot.SendMessage("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏..")
			if err != nil {
				log.Println("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
			}

			quotesString, err := dataFormatter.FormatQuotesToString()
			if err != nil {
				log.Println("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ ", err)
			}

			b.ReportCurrentQuotesRateAsync(quotesString)
		},
	})
	b.CalculateQuotesInfo()
	b.CheckQuoteLimitsByInterval(3600)
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WorkerPool
func (b *Bot) Stop() {
	b.workerPool.Stop()
	log.Println("[TICKER-PULSE-BOT]: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ WorkerPool
func (b *Bot) SendMessageAsync(text string) {
	b.workerPool.AddTask(func() {
		if err := b.tgBot.SendMessage(text); err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		} else {
			log.Println("[TICKER-PULSE-BOT]: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		}
	})
}

func (b *Bot) CreateKeyboardAsync() {
	b.workerPool.AddTask(func() {
		if err := b.tgBot.CreateKeyboard(); err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ GUI: %v", err)
		} else {
			log.Println("[TICKER-PULSE-BOT]: GUI —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
		}
	})
}

func (b *Bot) ListenKeyboardEventsAsync(handlers map[string]func()) {
	b.workerPool.AddTask(func() {
		b.tgBot.ListenKeyboardEvents(handlers)
	})
}

func (b *Bot) ReportCurrentQuotesRateAsync(quoteID string) {
	b.workerPool.AddTask(func() {
		cf := cryptoFetcher.NewCryptoFetcher()
		data, err := cf.FetchCoingeckoQuotesRate(quoteID, "usd")
		if err != nil {
			log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: %v", err)
			return
		}
		b.tgBot.SendMessage(b.tgBot.ConvertQuotesRateToMsg(data))
	})
}

func (b *Bot) CalculateQuotesInfo() {
	b.workerPool.AddTask(func() {
		cf := cryptoFetcher.NewCryptoFetcher()
		var updatedQuotes []quotes.QuoteInfo

		for _, quote := range b.quotes {
			time.Sleep(time.Duration(15) * time.Second)

			historicalData, err := cf.FetchCoingeckoHistoricalData(quote.QuoteID, 14)
			if err != nil {
				log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
				return
			}

			minMaxPrices, err := dataFormatter.CalculateHistoricalMinMax(historicalData, "prices")
			if err != nil {
				log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:  %v", err)
				return
			}
			log.Printf("%v min / max:  %v", quote.Ticker, minMaxPrices)

			quote.MinPrice = minMaxPrices.MinPrice
			quote.MaxPrice = minMaxPrices.MaxPrice
			quote.UpdatedAt = time.Now()

			updatedQuotes = append(updatedQuotes, quote)
		}

		b.quotes = updatedQuotes
		log.Println("[TICKER-PULSE-BOT]: –°–ø–∏—Å–æ–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	})
}

func (b *Bot) CheckQuoteLimitsByInterval(interval int) {
	cf := cryptoFetcher.NewCryptoFetcher()

	b.workerPool.AddTask(func() {
		for {
			quotesString, err := dataFormatter.FormatQuotesToString()
			if err != nil {
				log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
				return

			}

			quotesRate, err := cf.FetchCoingeckoQuotesRate(quotesString, "usd") // TODO: —É–ª—É—á—à–∏—Ç—å –≥–∏–±–∫–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞
			if err != nil {
				log.Printf("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: %v", err)
				return
			}

			for _, quote := range b.quotes {
				quoteRateMap, ok := quotesRate[quote.QuoteID].(map[string]interface{})
				if !ok {
					log.Printf("[TICKER-PULSE-BOT]: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–ª—è QuoteID %s\n", quote.QuoteID)
				}

				quoteUsdPrice, exists := quoteRateMap["usd"].(float64)
				if exists {
					log.Printf("%v: %v, min: %v, max: %v\n", quote.Label, quoteUsdPrice, quote.MinPrice, quote.MaxPrice)

					if quote.MinPrice != 0 && quoteUsdPrice < quote.MinPrice {
						msg := fmt.Sprintf("‚¨áÔ∏è %+v %+v, –°–ø—É—Å—Ç–∏–ª—Å—è –Ω–∏–∂–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: %.2f $", quote.Label, quote.Ticker, quoteUsdPrice)
						err := b.tgBot.SendMessage(msg)
						if err != nil {
							log.Println("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
						}
					}

					if quote.MinPrice != 0 && quoteUsdPrice > quote.MaxPrice {
						msg := fmt.Sprintf("‚¨ÜÔ∏è %+v %+v, –ü–æ–¥–Ω—è–ª—Å—è –≤—ã—à–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: %.2f $", quote.Label, quote.Ticker, quoteUsdPrice)
						err := b.tgBot.SendMessage(msg)
						if err != nil {
							log.Println("[TICKER-PULSE-BOT]: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
						}
					}

				} else {
					log.Printf("[TICKER-PULSE-BOT]: –ù–µ—Ç USD –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è %s\n", quote.QuoteID)
				}
			}

			time.Sleep(time.Duration(interval) * time.Second)
		}
	})

}
